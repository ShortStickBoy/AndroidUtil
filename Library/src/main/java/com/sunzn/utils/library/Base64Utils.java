package com.sunzn.utils.library;

import android.util.Base64;

/**
 * Created by sunzn on 2017/6/14.
 */

public class Base64Utils {

    private Base64Utils() {
        throw new RuntimeException("Stub!");
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：执行 Bsse64 编码
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：source  明文字节数组
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：编码后的字节数组
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static byte[] encode(byte[] source) {
        return encode(source, Base64.NO_WRAP);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：执行 Bsse64 编码
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：source  明文字节数组
     * ║ 参数：flags   控制编码输出特征
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：编码后的字节数组
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static byte[] encode(byte[] source, int flags) {
        return source == null ? new byte[]{} : Base64.encode(source, flags);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：执行 Bsse64 编码
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：source  明文字符串
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：编码后的字符串
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static String encodeToString(String source) {
        return encodeToString(source, Base64.NO_WRAP);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：执行 Bsse64 编码
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：source  明文字符串
     * ║ 参数：flags   控制编码输出特征
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：编码后的字符串
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static String encodeToString(String source, int flags) {
        return StringUtils.isEmpty(source) ? StringUtils.NULL : Base64.encodeToString(source.getBytes(), flags);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：执行 Bsse64 解码
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：source  密文字节数组
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：解码后的字节数组
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static byte[] decode(byte[] source) {
        return decode(source, Base64.NO_WRAP);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：执行 Bsse64 解码
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：source  密文字节数组
     * ║ 参数：flags   控制解码输出特征
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：解码后的字节数组
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static byte[] decode(byte[] source, int flags) {
        return source == null ? new byte[]{} : Base64.decode(source, flags);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：执行 Bsse64 解码
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：source  密文字符串
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：解码后的字符串
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static String decodeToString(String source) {
        return decodeToString(source, Base64.NO_WRAP);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：执行 Bsse64 解码
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：source  密文字符串
     * ║ 参数：flags   控制解码输出特征
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：解码后的字符串
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static String decodeToString(String source, int flags) {
        return StringUtils.isEmpty(source) ? StringUtils.NULL : new String(Base64.decode(source, flags));
    }

}
