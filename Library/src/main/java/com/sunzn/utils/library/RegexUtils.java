package com.sunzn.utils.library;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static com.sunzn.utils.library.ConstUtils.REGEX_DATE;
import static com.sunzn.utils.library.ConstUtils.REGEX_EMAIL;
import static com.sunzn.utils.library.ConstUtils.REGEX_ID_CARD15;
import static com.sunzn.utils.library.ConstUtils.REGEX_ID_CARD18;
import static com.sunzn.utils.library.ConstUtils.REGEX_IP;
import static com.sunzn.utils.library.ConstUtils.REGEX_MOBILE_EXACT;
import static com.sunzn.utils.library.ConstUtils.REGEX_MOBILE_SIMPLE;
import static com.sunzn.utils.library.ConstUtils.REGEX_TEL;
import static com.sunzn.utils.library.ConstUtils.REGEX_URL;
import static com.sunzn.utils.library.ConstUtils.REGEX_USERNAME;
import static com.sunzn.utils.library.ConstUtils.REGEX_ZH;

public class RegexUtils {

    private RegexUtils() {
        throw new RuntimeException("Stub!");
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：验证手机号（简单）
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 待验证文本
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isMobileSimple(CharSequence input) {
        return isMatch(REGEX_MOBILE_SIMPLE, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：验证手机号（精确）
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 待验证文本
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isMobileExact(CharSequence input) {
        return isMatch(REGEX_MOBILE_EXACT, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：验证电话号码
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 待验证文本
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isTel(CharSequence input) {
        return isMatch(REGEX_TEL, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：验证15位身份证号码
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 待验证文本
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isIDCard15(CharSequence input) {
        return isMatch(REGEX_ID_CARD15, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：验证18位身份证号码
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 待验证文本
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isIDCard18(CharSequence input) {
        return isMatch(REGEX_ID_CARD18, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：验证邮箱
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 待验证文本
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isEmail(CharSequence input) {
        return isMatch(REGEX_EMAIL, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：验证 URL
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 待验证文本
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isURL(CharSequence input) {
        return isMatch(REGEX_URL, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：验证汉字
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 待验证文本
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isZh(CharSequence input) {
        return isMatch(REGEX_ZH, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：验证用户名
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 待验证文本
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isUserName(CharSequence input) {
        return isMatch(REGEX_USERNAME, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：验证yyyy-MM-dd格式的日期校验，已考虑平闰年
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 待验证文本
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isDate(CharSequence input) {
        return isMatch(REGEX_DATE, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：验证IP地址
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 待验证文本
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isIP(CharSequence input) {
        return isMatch(REGEX_IP, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：判断是否匹配正则
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：regex 正则表达式
     * ║ 参数：input 要匹配的字符串
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：{true : 匹配} {false : 不匹配}
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static boolean isMatch(String regex, CharSequence input) {
        return input != null && input.length() > 0 && Pattern.matches(regex, input);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：获取正则匹配的部分
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：regex 正则表达式
     * ║ 参数：input 要匹配的字符串
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：正则匹配的部分
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static List<String> getMatches(String regex, CharSequence input) {
        if (input == null) return null;
        List<String> matches = new ArrayList<>();
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(input);
        while (matcher.find()) {
            matches.add(matcher.group());
        }
        return matches;
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：获取正则匹配分组
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input 要分组的字符串
     * ║ 参数：regex 正则表达式
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：正则匹配分组
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static String[] getSplits(String input, String regex) {
        if (input == null) return null;
        return input.split(regex);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：替换正则匹配的第一部分
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input       要替换的字符串
     * ║ 参数：regex       正则表达式
     * ║ 参数：replacement 代替者
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：替换正则匹配的第一部分
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static String getReplaceFirst(String input, String regex, String replacement) {
        if (input == null) return null;
        return Pattern.compile(regex).matcher(input).replaceFirst(replacement);
    }

    /**
     * ╔════════════════════════════════════════════════════════════════════════════════════════════
     * ║ 名称：替换所有正则匹配的部分
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 参数：input       要替换的字符串
     * ║ 参数：regex       正则表达式
     * ║ 参数：replacement 代替者
     * ╟────────────────────────────────────────────────────────────────────────────────────────────
     * ║ 返回：替换所有正则匹配的部分
     * ╚════════════════════════════════════════════════════════════════════════════════════════════
     */
    public static String getReplaceAll(String input, String regex, String replacement) {
        if (input == null) return null;
        return Pattern.compile(regex).matcher(input).replaceAll(replacement);
    }
    
}